AWSTemplateFormatVersion: "2010-09-09"
Description: "Simple CloudFormation template for EC2 instance with ClickHouse for EKS integration"

Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-0c7217cdde317cfec  # Amazon Linux 2023 AMI in us-east-1
    us-east-2:
      AMI: ami-05fb0b8c1424f266b  # Amazon Linux 2023 AMI in us-east-2
    us-west-1:
      AMI: ami-0ce2cb35386fc22e9  # Amazon Linux 2023 AMI in us-west-1
    us-west-2:
      AMI: ami-008fe2fc65df48dac  # Amazon Linux 2023 AMI in us-west-2
    eu-west-1:
      AMI: ami-0694d931cee176e7d  # Amazon Linux 2023 AMI in eu-west-1
    eu-central-1:
      AMI: ami-0292a7dcdbd5b2be6  # Amazon Linux 2023 AMI in eu-central-1
    ap-northeast-1:
      AMI: ami-0ab0bbbd329f565e6  # Amazon Linux 2023 AMI in ap-northeast-1
    ap-southeast-1:
      AMI: ami-0df7a207adb9748c7  # Amazon Linux 2023 AMI in ap-southeast-1
    ap-southeast-2:
      AMI: ami-0310483fb2b488153  # Amazon Linux 2023 AMI in ap-southeast-2

Resources:
  # Generate a random password for ClickHouse
  ClickHousePassword:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: "Password for ClickHouse default user"
      Name: !Sub "clickhouse-${ClusterName}-password"
      GenerateSecretString:
        PasswordLength: 16
        ExcludeCharacters: '"@/\\'
        ExcludePunctuation: true
        IncludeSpace: false
        RequireEachIncludedType: true

  # Store the password in SSM Parameter Store
  ClickHousePasswordParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/clickhouse/${ClusterName}/admin-password"
      Description: "Password for ClickHouse default user"
      Type: "SecureString"
      Value: !Sub "{{resolve:secretsmanager:${ClickHousePassword}:SecretString}}"
      Tags:
        ClusterName: !ImportValue "ClusterName"

  ClickHouseInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.medium
      SecurityGroupIds:
        - !ImportValue "MyStack-ClickHouseSecurityGroupId"
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      SubnetId: !ImportValue "MyStack-PrivateSubnetAId"
      IamInstanceProfile: !ImportValue "MyStack-ClickHouseInstanceProfileName"
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp3
            VolumeSize: 100
            DeleteOnTermination: true
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          
          # Update system packages
          dnf update -y
          
          # Install required packages
          dnf install -y curl wget jq aws-cli

          # Get the password from Secrets Manager
          PASSWORD=$(aws secretsmanager get-secret-value --secret-id ${ClickHousePassword} --region ${AWS::Region} --query SecretString --output text)
          
          # Add ClickHouse repository
          sudo mkdir -p /etc/apt/sources.list.d/
          sudo mkdir -p /etc/apt/keyrings/
          curl -fsSL https://packages.clickhouse.com/rpm/clickhouse.repo | sudo tee /etc/yum.repos.d/clickhouse.repo
          
          # Install ClickHouse server and client
          dnf install -y clickhouse-server clickhouse-client
          
          # Configure ClickHouse to listen on all interfaces
          sed -i 's/<listen_host>::1/<listen_host>::<\/listen_host>\n    <listen_host>0.0.0.0/g' /etc/clickhouse-server/config.xml
          
          # Configure ClickHouse users
          cat > /etc/clickhouse-server/users.d/custom-users.xml << EOF
          <clickhouse>
              <users>
                  <default>
                      <password>$PASSWORD</password>
                      <profile>default</profile>
                      <quota>default</quota>
                      <networks>
                          <ip>::/0</ip>
                      </networks>
                      <access_management>1</access_management>
                  </default>
              </users>
          </clickhouse>
          EOF
          
          # Start ClickHouse service
          systemctl start clickhouse-server
          systemctl enable clickhouse-server
          
          # Wait for ClickHouse to start
          sleep 10
          
          # Create application database
          clickhouse-client --password "$PASSWORD" --query "CREATE DATABASE IF NOT EXISTS appdb"
          
          # Signal completion
          echo "ClickHouse installation completed" > /var/log/clickhouse-install-complete.log
          
          # Tag the instance with EKS cluster name for easier identification
          INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
          aws ec2 create-tags --resources $INSTANCE_ID --tags Key=EKSCluster,Value=${ClusterName} --region ${AWS::Region}
      Tags:
        - Key: Name
          Value: !Sub "ClickHouse-Server-${ClusterName}"
        - Key: EKSCluster
          Value: !ImportValue "ClusterName"

Outputs:
  ClickHouseInstanceId:
    Description: ID of the ClickHouse EC2 instance
    Value: !Ref ClickHouseInstance
    Export:
      Name: !Sub "${AWS::StackName}-ClickHouseInstanceId"
  
  ClickHousePrivateIP:
    Description: Private IP address of the ClickHouse instance (for EKS access)
    Value: !GetAtt ClickHouseInstance.PrivateIp
    Export:
      Name: !Sub "${AWS::StackName}-ClickHousePrivateIP"
  
  ClickHouseHTTPEndpoint:
    Description: HTTP endpoint for ClickHouse (private access only)
    Value: !Sub "http://${ClickHouseInstance.PrivateIp}:8123"
    Export:
      Name: !Sub "${AWS::StackName}-ClickHouseHTTPEndpoint"
  
  ClickHouseClientEndpoint:
    Description: Client endpoint for ClickHouse (private access only)
    Value: !Sub "${ClickHouseInstance.PrivateIp}:9000"
    Export:
      Name: !Sub "${AWS::StackName}-ClickHouseClientEndpoint"
      
  ClickHousePasswordParameter:
    Description: SSM Parameter Store path for the ClickHouse password
    Value: !Sub "/clickhouse/${ClusterName}/admin-password"
    Export:
      Name: !Sub "${AWS::StackName}-ClickHousePasswordParameter"
      
  ClickHouseSecretArn:
    Description: ARN of the Secrets Manager secret containing the ClickHouse password
    Value: !Ref ClickHousePassword
    Export:
      Name: !Sub "${AWS::StackName}-ClickHouseSecretArn"